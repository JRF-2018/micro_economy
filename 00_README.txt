

	ミクロ経済学の我流シミュレーション
	(Created: 2018-03-17, Time-stamp: <2020-03-26T08:52:22Z>)

	その１ 基礎経済モデル


** 概要

ミクロ経済学に基づき、経済シミュレーションまたはゲームを作った。モデル
自体は簡単なものなのだが、「動く」までにするのが一苦労であった。コン
ピュータでシミュレーションができるようになるまでには、いろいろ決め難い
ことを決めねばならない。あいまいにしたいことがあれば、どうやってあいま
いにするのか、乱数を使うならどのような乱数を使うのかを決めなければなら
ない。企業が赤字の場合どうするか、パラメータが 0 や無限に近くなるの
をどのような考え方で防ぐか、そういったことを決めていかねばならなかった。
本記事は、その記録である。

基本的なアイデアは、価格によって需要と供給を決め、その需要と供給が一致
するように、つまり(需要-供給)の二乗が最小となるように、最適化関数を用い
れば、経済シミュレーションができるのでは？…というものである。

しかし、商品の生産について考えてみると、価格が増えると供給が増えるとい
う経済学の法則が、個々の企業においては成り立っていないと考えるようになっ
た。もちろん、利益が出ていれば新しい企業が参入があるし、利益が出ていな
ければ退出があって、そういう意味で「供給力」の増減はあるだろうけれども、
むしろ、個々の企業は赤字にならない限り需要があれば必ず生産はするのでは
ないかと考えるに致った。しかし、そう考えると、需要と供給は必ず一致する
わけで、(需要-供給)の二乗を最小化するという道は崩れる。替わりに各企業を
総合した利益を最大化することを最適化に組み込むことにした。(労働需給に
関してのみ、(需要-供給)の二乗の最小化を組み込んだ。)

マルクス経済学を参考に、商品は、必需品、贅沢品、原料の三種ということに
した。労働者は必需品を毎期需要し、また、貯蓄を持ち、(マルクス経済学と
違って)貯蓄等の余裕から贅沢品を需要すると考えた。必需品、贅沢品、さら
に原料も、原料と労働から作られると考えた。

資本家は、違った戦略を持ったエージェント 5人で表し、一期につき一分野に
一社しか企業が参入できないと決めた。モデルを簡単にするためである。参入
する資本家はランダムとした。

本来は、このシミュレーションを使って経済学的知見を確認するのが目的であっ
た。しかし、思いのほか、シミュレーションをまともに動かすのに手こずり、
たまに「まとも」に見える動作をするだけで満足するのが現状で、経済的知見
のような微妙なことを言えるまでには致っていない。それが残念である。今後
の課題としたい。

プログラム言語は、流行の Python を使った。人工知能入門を私が勉強したと
きに Python の最適化関数を知ったのが、Python を使おうと思ったキッカケで
ある。


** 動機と目的

今回とは別の未発表の経済モデルについて考想を練っているときに、ヒントに
なればと『経済原論』を何冊か読んでみた。『経済原論』というのはどうもマ
ルクス経済学の分野らしく、ミクロ・マクロ経済学以前の経済常識を読みたい
と思っていた私には過ぎた本ばかりだったのだが、その中で、私は次のような
記述に出会った。

> 資本の累積的蓄積にともなう労働需要の累増によって、あるいは新市場の開
> 拓、新産業分野の展開等にともなう資本の飛躍的膨張による労働需要の急増
> によって、産業予備軍が一定限をこえて収縮すれば、賃金率が上昇し、その
> 賃銀率の上昇は機械採用の誘因として作用し、資本構成高度化の速度が高ま
> る。すなわち、追加資本はヨリ高度な資本構成をもって投下され、また、元
> 資本の更新が促進されかつその更新にともなう構成高度化の度合が大となる。
> かくして、一方では大量の予備軍が排出され他方では労働力吸収力が弱まる
> ことによって、再び貯水池は膨張し、賃銀率が下落せしめられることとなる。
>
> (…)
> 
> 賃銀率の上昇が機械採用の誘因として作用するのは、機械が(その耐久年限の
> 間にわたって)節約する延べ労働量に対して支払われる賃銀総額よりもその機
> 械の価値が小なることが機械採用の資本制的限界条件をなし、他面では賃銀
> 率の上昇は旧生産方法による諸資本の剰余価値をますます減少せしめ資本と
> しての存立を維持し難くするからである。
>
> (富塚良三『経済原論』p.158-159)

機械が相対的余剰人員を作るというだけでなく、旧生産方法にとって賃金高が
苦しいのが余計に賃金を下げる原因となる。二重の要因となるのが大きいのか
と思った。しかし、新生産方法への移行には、機械の更新にともなう労働力需
要による賃金増もあるはずで、このあたりはちゃんとモデルを作ってみる価値
があるように思った。ここをコンピュータ・シミュレーションできればかっこ
いい。やりたい。…というのが動機だった。

機械の高度化には、労働力を少なくするものの他に、原料を少なくするような
ものや、(剰余)価値を高めるようなものがあるはずで、どういうものを選ぶの
か、無差別曲線的なものが描けそうだ。どういうものを選べば有利か「学習」
さえできるかもしれない。上昇に対して上昇があったり下降があったりという
のは差分(微分)方程式的なモデルにすればよいのだろうか。…などと考えはす
るが、それらをちゃんとしたシミュレーションにできるかどうかはまだ自信が
なかった。

そのころ上記を読んで得たアイデアを列挙すると次のようなものであった。

  * 労働需要が増えれば、賃金があがり、賃金があがれば、機械が高度化され
    る。機械には更新期があり、高度化がなくても更新しなければならない。
    更新前の変更は高コストになるはずだ。機械が高度化されたあとでは、労
    働需要が下がる。

  * 労働力を少なくするものは、労働需要を少なくするもので、必要な労賃が
    必ず減るとは限らない。

  * インフレ等も考えれば、原料も価格そのものではなく機械高度化により数
    量を下げると考えるべきなのだろうか？ 原料自体、基本的には機械高度化
    により安く作れるようになるはずで、その点はデフレ基調と考えるべきな
    んだろうか？

  * 特別剰余価値の計算が上掲本の p.111 にあるが、そこで示されることに基
    づく以外の機械の陳腐化はありえるのだろうか？ ちなみにそのモデルだと
    特別剰余価値を持ったものは商品価格は下がるとなっている。価値の高い
    同種商品を作れるようになった場合、それにより従来品の個数が減る。減っ
    た個数を ΔX とし、新商品の価値を b、旧商品の価値を a とすると、(b
    - a) * ΔX が特別剰余価値になるのだろうか？ いや、違う。シェアの問
    題があるだろう。新商品に切り替えることでシェアが延びた場合は必ずし
    もそうならないことがある。そして、商品を作れば作るほど一個あたりの
    コストが安くなるとして、特別剰余価値をそのあたりから考える必要があ
    る。価格が上がったことで、シェアが逆に減り、他が多く売ってコストが
    安くなることも考えるべきだ。

  * 労賃が、需要と供給によってどのように決定されるか？ 「平均的な賃金」
    は決まるかもしれないが、高度人材等の賃金や、最低賃金的なものはどう
    なるのか？ 生産財と消費財の労働に関する賃金が違い、一方が高くなる
    としばらくして移動が起こり、賃金が等しくなっていくというモデルも考
    えられる。

  * 価格に対する需要の需要曲線と価格に対する供給の供給曲線から価格が決
    まるのが、本来のミクロ経済学のモデル。このとき、複数社については需
    要曲線や供給曲線を足し合わせたものを考えるのが、もっとも素直だろう
    が、難しい。会社をオブジェクトと見て、そこに価格を与えると需要量と
    供給量を返させる。そして、価格を変化させて需要と供給の量がだいたい
    一致する(か振動が何回か続く)まで動かせばよい。そのような「最適化」
    をすればよいだろう。しかし、財が複数あってそれに価格があるという場
    合、価格の組に対する最適化を行うことになり、時間がかかるかもしれな
    い。

  * 生産財・消費財・奢侈財と分け、それを含む割合で商品を表示すべきか？
    しかし、「新商品」の需要の価格弾力性のモデル(↓)は、価格に自己決定
    権があるというモデルになった。需要の予想から価格を決め、それに対す
    る需要が決まり、それに合わせて生産(供給)し、その供給のための生産財
    の需要が求まる…といった動きになるのではないか？ いや、違う。価格を
    誰が決めるのだ？ 生産財の価格に対して、どれだけ売りたいがが決まり、
    生産財への需要が決まるのではないか？ やりたい戦略が先にあって、生産
    価格により妥協するということではないか？

    《需要の価格弾力性の定義っておかしいと思う。（…）新商品って価格が
    少々高かったからって欲しくなくなることはないが、少しでも安いとこの
    機を逃さず買おうとする人がたくさん出てくるように思う。それって普通
    の弾力性の定義だと折れ線になる。》
    http://jrf.cocolog-nifty.com/statuses/2018/02/post-7c1e.html

  * 賃金があがれば、旧生産方式は「余計に」苦しくなる。なので、賃金を下
    げようとする。どうやって？ 退出によって？ むしろ、より低い労賃の者
    を選好することによってではないか？ 従来からいるものの賃金も下げよう
    とする。インフレ等で必要になっても、高い賃金を出ししぶる。生産の賃
    金弾力性が上がるということでは？ 逆に言えば、他は賃金が上がろうが下
    がろうが生産するということ。そういう需要がある…と？ 陳腐化した商品
    は相対的に価格弾力性があり、それ以上に生産に弾力性があるということ
    では？

  * 産業予備軍の多さが労賃に関係している。必要生活費も労賃に関係してい
    る。機械がよくなれば、商品が安くなり、必要な労賃は下がり、労働需要
    がやがて回復する。

  * 労賃は下がり労働需要が回復するというところ、産業予備軍との関係はど
    うなる。必要生活費が減ると、働かなくて済む可能性が増えるという点で
    は産業予備軍数を増やすように思われるが、働く意思のあるという点だと
    予備軍を減らすようにも思える。どっちなのか？ ただし、いずれにせよ、
    労賃は増える方向になるはずだ。これは生活費の減少が労働者に与える影
    響である労賃減の受忍度が上がるのとは逆の方向だ。

…等々。ここから今回のシミュレーションにアイデアを活かしたものもあるし、
そうでないものもある。機械高度化はモデルとしては組み込んでいるが、その
設定を活かした結果が出たとは言い難い。平均賃金以外の賃金についても今回
は考えていない。原料・必需品・贅沢品を部分として含む中間財のようなもの
もモデル化にまでには致らなかった。「新商品」「旧商品」という議論もほと
んど組み込んでいない。これらのことは今後の課題としたい。


** 生産の理論の前理論

アイデアの初期段階では、企業オブジェクトに賃金等の価格情報を与えると、
需要量と供給量を返し、それを合算して (需要 - 供給) ** 2 ("**" はPython
などでのべき乗の記号)を最小化すれば良いと考えていた。

しかし、耐久消費財を念頭においた生産について考えているところでつまづい
た。会社の個別の商品を見た場合、固定費がある分、数を作ったほうが安くな
る。供給数が増えれば価格が安くなるという関係をグラフにすると、価格が高
くなると供給が減るという関係になる。これは通常、供給曲線を考える際の価
格が高くなれば供給が増えるというグラフの逆である。

最適化の過程では、価格がまず決まるとする。商品価格が決まっている状況で、
需要が決まったとしよう。安く数が作れるといっても需要量に対しては多過ぎ
るということがあり得よう。価格が高くなると生産量が少なくなるが、価格が
高くなるごとに需要も少なくなり、いつかは需要量に対してピッタリの数が供
給できるということになるのではないか？

生産曲線を描くための式を考えよう。生産量を n、価格を P、固定費を K、労
賃を V、原料費を C とし、商品一個あたりに必要な原料を α 個、商品一個あ
たりに必要な労働量を γ 人としよう。利益率 β を固定することで、生産曲
線は次のようになる。

   β = (- K + (P - α * C - γ * V) * n) / (K + (α * C + γ * V) * n)

   <=> n = (1 + β) * K / (P - (1 + β) * (α * C + γ * V))

P が大きくなるほど n が小さくなる曲線になっている。これが需要と一致する
点を考えるべきだろうか？ しかし、利益率 β を固定するとは少しおかしいの
ではないかと私は考えた。利益率はできるだけ大きくなるようにするものだか
らだ。むしろ、n と P が決まって β が決まるものではないだろうか？ 価格
から決まるものと言えば、生産量というより利益率ではないか…と私は考えを
改めた。それなら自由にすべき変数は n ではなく β だ。

…実のところを白状すると、それで考えを改めたのではない。複数企業が参入
したときに赤字をどうするかというところで私は考えを改めたのである。赤字
が存在する場合、企業は赤字がもっとも小さくなるように行動する。上の式で
言えば P > α * C + γ * V であれば、できるだけ生産したほうが赤字幅が小
さくなり、そうでなければ生産はいっさいやめたほうがよい。このとき有利な
生産量の上限みたいなものがあるなら、上の生産の理論に意味があるが、生産
するならなるだけ多く生産したほうがよいというなら、生産は常にギリギリま
でやると考えたほうがよい…と考えを改めたのであった。


** 生産の理論

生産する企業において需要量が先に決まりそれに合わせて生産が行われる。利
益率は上の β になり、(需要 - 供給) ** 2 の最小化ではなく、この β の
最大化を最適化のスコアの中に組み込もうと考えを改めた。

さて、次の問題は、工場を増やす場合である。これには二つの場合が考えられ
る。一つは同じ企業がラインを増やす場合である。もう一つは、違う企業が参
入して来るというものである。その違いは赤字のときに顕著に現れる。赤字に
なったとき、同じ企業が複数のラインを持つ場合は、一番、有利な条件のとこ
ろのみを稼動させて他を休止すればよい。もし、生産に上限がないとすれば、
これは赤字でない場合もそうである。

複数の会社が参入しているという場合、それぞれの会社が P > α * C + γ *
V である限りにおいて生産しようとするだろう。そして、赤字を「分担」する
ことになる。

本稿では、簡単にするため複数会社の参入の場合のみを考えることにした。そ
して、生産数の上限はないものとし、一企業で莫大な需要をこなすのも可能だ
とした。

どのように「分担」するかであるが、ここで、「動機と目的」でチラと述べた
アイデアを使う。それは「機械の高度化には、労働力を少なくするものの他に、
原料を少なくするようなものや、(剰余)価値を高めるようなものがある」とい
う考えである。

企業(Python では Company オブジェクト) i は、剰余価値的な「優位性
(superiority)」A_i と上の α にあたる「一製品あたり原料
(ingredientsPerProduct)」α_i と上の γ にあたる「一製品あたり労働量
(laborsPerProduct)」γ_i の他に、優位性がどれぐらいの早さで陳腐化して
いくかを示す「優位性減衰(superiorityDecay)」δ_i を持つとする。

基本的には優位性の重みづけに基づいて「分担」が行われると考える。しかし、
それだけではない。

「動機と目的」のところで「旧生産方式(…では…)生産の賃金弾力性が上がる」
と考えたが、これを活かしたい。一方、機械の高度化により γ は小さくなっ
ていくが、γ が大きいほど相対的に弾力性が大きく、したがって旧企業ほど弾
力性が大きいのではないか。つまり、生産の賃金弾力性の変化の正体は、γ に
あるのではないかと考えた。

全体の生産量が大きくなったり小さくなったりするなか賃金弾力性は割合に関
して大きくなったり小さくなったりすることだろうと考えた。最初、γ_i の平
均を γ_M として、賃金の変化量を Δ として、A_i * (a * Δ * γ_i /
γ_E) を重み付けとして分配することを考えたが、この場合、分子と分母両方
にくることで変化量 Δ が消えてしまい、弾力性として意味をなさない。そこ
で、A_i * ((γ_i / γ_M) ** (- c * Δ)) という重み付けにすることにした
(a, c は何らかの定数)。(なお、分子と分母両方に来ることでγ_M の項は消え
るので、A_i * (γ_i ** (- c * Δ))を重み付けに用いた。

P > α * C + γ * V なる企業は、「分担」に参加する。それ以外は参加しな
い。しかし、特別な場合として、P > α * C + γ * V なる企業が一つも存在
しないことがありうる。その場合は、しきり直して、すべての企業が参加し、
上の重み付けで生産つまり赤字を分担することにした。このとき優位性を基準
にするのではなく、赤字の軽いところにより多く割り当てるような考え方も取
れるかもしれないが、今回はそうしなかった。

なお、マルクス経済学では用語として「労働」と「労働力」を厳しく峻別する
が、本稿ではそこのところを気にせず、「労働量」を「労働力量」の意味で用
いている。あえていえば、運の要素を含まない「労働」はありえず、そうなら
ばそれは「労働力」と区別できないと(今回は)考えたからである。


** 資本家による企業参入

商品には、必需品・贅沢品・原料の三種があるとする。企業の参入はそれぞれ
の分野一期に一社ずつしか起こらないとする。収益機会が豊富にあって、参入
がたくさんあるというのは毎期参入があることで表現できると考えた。

逆に言うと参入できないときがあるということで、それが資本家の負債(debt)
が 0 でない間は参入できないというルールによる。利潤がある間は、投資用の
資金がたまる＝負債が減るが、資本家が一旦投資をすると、参入によりその分
野の利潤が減り、次の投資までの時間があき、しばらくして更新がとまり、再
び利潤機会が復活する…といったことを想定している。

資本家は 5人いるものとする。その期に参入するかどうかはくじ引きで順番を
決め順に試算していく。試算して参入する今期と前期と前々期の三期平均の利
益率と今期の利益率の低い方の利益率が「市場利子率」と目される標準的な利
益率 6 % を超えていれば、参入が行われることになる。5人とも参入しない場
合は参入は行われない。(前期・前々期の利益率はその分野の最大の利益を出し
た企業のもの。)

企業の固定資産は 10 期で更新期を迎える。このとき、更新のために特別なこ
とをしない。その企業が去り、有利ならば他の企業が新規参入してくるだけで
ある。企業の優位性 A_i は毎期優位性減衰 δ_i をかけることで減衰させら
れる。

企業は次のようにして作られると決めた。

まず、固定資産を作るには原料が必要で、第1期に必要な原料は 5 個とし、新
しい企業を作るごとに前の企業の固定資産に必要な原料の 1.05 倍の原料が必
要となる。

0 から 1 まで変化しうる変数 r_1 と r_2 を決めたとして、A_i、δ_i、α_i、
γ_i は次のように決める。

  A_i = (4 - 2) * r_1 + 2

  γ_i = ((0.99 - 0.95) * r_1 + 0.95) * γ_{i-1}

  δ_i = ((0.5 ** 0.1) - (0.25 ** 0.1)) * r_2 + (0.25 ** 0.1)

  α_i = ((1.18 - 0.98) * r_2 + 0.98) * α_{i-1}

ちなみに α_{i-1}、γ_{i-1} は前の企業の α と γ である。

つまり、優位性 A を大きくしようと思えば、商品あたりの労働量 γ を犠牲
にして大きくしなければならないし、優位性減衰を有利にすなわち大きな値に
したいなら、商品あたりの原料を犠牲にして大きくしなければならないという
ことである。

このリクツは…、優位性を得ようとすれば手をかけたことすなわち労働量を多
くかけたことをしないといけないが、そのままではすぐに陳腐化する。それを
防ぐには宣伝費をかけるなり流行によって変えやすい部分を余計につくる…す
なわち原料を多く使う必要がある。…というものである。

資本家 5人はこの r_1 と r_2 の決め方が違う。一人は r_1 と r_2 をランダ
ムに決める。別の一人は r_1 = 0、r_2 = 0 に、また別の一人は r_1 = 0、
r_2 = 1 に、また別の一人は r_1 = 1、r_2 = 0 に、最後の一人は r_1 = 1、
r_2 = 1 に決め打ちする。

さて、特別な場合として、ある分野の企業の数が 0 になる場合がある。この
場合は、利潤に関係なく誰か一人の資本家が参入を行うこととする。基本はラ
ンダムであるが、負債がない者がいればそれを優先する。これにより生産が途
切れることがなくなる。


** 必需品の需要

労働者は産業予備軍(失業者)も含めて 1000 人いるものとする。資本家と合わ
せて需要家は 1005 人いることになる。

必需品需要については被雇用者者も失業者も資本家も同じである。一定の価格
弾力性に基づき、価格差と前期の必需品需要から求める。弾力性 E (< 0)、前
期の一人あたりの需要を D_{i-1}、前期の必需品の価格を P_{i-1}、今期の必
需品の価格を P_i とすれば、今期の一人あたりの需要 D_i は、

  D_i = (1 - ((P_i - P_{i-1}) / P_{i-1}) * E) * D_{i-1}。

ただし、必需品がまったくいらなくなるということはありえないので、D_i を
1 以上に決め、上の計算式が 1 に満たないときは D_i = 1 とした。


** 労働の需要と供給

労働の供給のアイデアは、「動機と目的」で述べた「必要生活費が減ると(…)
労賃は増える方向になるはず」という考察と、賃金から必要生活費を除いた
「余剰」それを本稿では仮に「新規貯蓄」と呼ぶが、それが大きいほど労働意
欲がわくはずだという考察による。この意欲をどうミックスするかを決めねば
ならないが、一定の率 r (= 0.5) を決め、それぞれの要素を加味することにし
た。(なお、新規貯蓄が 0 以下の場合は、労働供給はなされないと考えた。)

また、労働供給はある程度は動くだろうが、上限・下限があるだろう。前期の
失業者数のプラス・マイナス 50% ぐらいだろうか。一方、必要生活費がどれぐ
らい動いたかや、新規貯蓄がどれぐらい動いたかは、プラス・マイナス無限の
値を理論的には取りうると考える。それをうまく表せる関数の一つに arctan
(正接 tangent の逆関数) があるので今回はそれを使おう。

今期・前期の失業者の人数を n_i・n_{i-1}、今期・前期の新規貯蓄を S_i・
S_{i-1}、今期・前期の必要生活費を N_i・N_{i-1} とする。なお、必要生活
費はその期の必需品の価格に前節の一人あたりの必需品需要をかけたものであ
る。

  q = r * ((S_i - S_{i-1})/S_{i-1}) + (1 - r) * ((N_i - N_{i-1}/N_{i-1}))

  n_i = n_{i-1} - 0.5 * (2/π) * arctan(2 * q) * n_{i-1}

…とする。なお、失業者よりも被雇用者が多い場合は、失業者ではなく被雇用
者に対して上式を使う。なお、arctan の中身が 2 * q になっているのは q に
対する反応をよくするため適当な数値(ここでは 2)をかけることに決めたため
である。

一方、労働需要については、必需品・贅沢品・原料について需要が決まればそ
れぞれの企業の生産個数が決まり、それをその企業の商品あたりの労働量とか
けて積み上がれば、全体の労働需要になる。

労働需要と労働供給については初期の構想のまま、(需要 - 供給) ** 2 を最適
化のスコアの中に組み込む。


** 贅沢品の需要

マルクス経済学では、労働者は贅沢品を買わないなどと考えたりするものだが、
本稿ではそのような考えを取らない。贅沢品は、労働者も資本家も等しく、貯
蓄が多くなるごとに強く嗜好すると考えた。

ただし、目安となる基準額は今期の新規貯蓄から決まり、それは新規貯蓄の３
倍とする。貯蓄が基準額を越える部分の 1/3 を基準額に足した額がその者の需
要の強さとし、最適化のパラメータとして与えられる贅沢品の価格よりそれが
上であれば、その者は贅沢品を需要するとする。

贅沢品を需要する者を積み上げた数字が、その期の贅沢品の需要量となる。


** 原料の需要

原料の需要を計算するには少し複雑な計算が必要である。というのは、原料の
生産自体に原料を必要とすると考えるからである。

必需品・贅沢品の需要および企業の新規設立にともなう需要から、とりあえず
原料の必要最低限が計算できる。そして、その必要最低限について原料を生産
すると、余分に必要な原料を計算できる。そして、この余分に必要な原料を生
産するためにさらに余分な原料を計算できる。その余分となる部分は小さくなっ
て 0 に近づく。それを足しあわせれば、必要な原料の需要量＝生産量にな
る。…というのが基本的なアイデアである。そういうのは最適化で解くことが
できる(ことがある)。

最初の必要最小限の量を d_0 としよう。「分担」にしたがって k + d_0 を
生産して k' が「余分な生産量」として求まるとする。この (k' + d_0 - k -
d_0) ** 2 を最小にするよう最適化する、すなわち k - k' = 0 <=> k = k' に
なる点がみつかる。

α_M を企業の中で最大の商品あたり原料とする。k を「余分な生産量」とする
と、k = α_M * (k + d_0) を解いた k より小さいものが実際の「余分な生産
量」になる。そのような k と k = 0 を範囲として最適化をすればよい。

なお、この原料生産における α が 1 を越えるとおかしなことになる(「余分」
なはずがマイナスになってしまう)。そして 1 に接近するごとに無限に k が大
きくなりうる。本稿のシミュレーションではそのため上限値を 0.9 にして規制
している。マルクス経済学で原料的なものへの生産への投資だけを肥大化する
議論があったりするが、それはここに現れているのかもしれない。


** 社会的負債

最適化のパラメータとして賃金・必需品・贅沢品・原料の価格を与え、最小化
するスコアとして (労働需要 - 労働供給) ** 2 に、各企業の利潤にマイナス
をかけたものを足したものを使って、大きく最適化を回す。

すると本来なら 労働需要 - 労働供給 = 0 になって欲しいのであるが、他との
かねあいで、そうならないことも出てくる。その場合にどう考えればよいか決
めねばならない。

ここで社会的負債という考え方を導入する。誰か個人に帰さない負債をその勘
定科目に付けるのである。まず、失業者の必要生活費は、毎期、この社会的負
債とする。

次に 労働需要 - 労働供給 = 0 にならなかった残りを考える。労働需要が労
働供給より大きい場合は、被雇用者が「残業」をして補ったと考える。残業代
は通常の賃金の二倍とする。もう少し具体的に書くと (労働需要 - 労働供給)
* 2 * 賃金 / 被雇用者数 が被雇用者の賃金にプラスされる。その原資は社会
的負債とする。

一方、労働供給が労働需要より大きい場合、あまった「被雇用者」は、社会的
負債から賃金を出すことにする。

さて、こうすると、資本家がだいぶ得しているように見えるかもしれないが、
本モデルでは、資本家の利益は必要経費以外すべて社会的負債を減らすことに
使われるという乱暴な決めごとをしいた。

まず資本家の「賃金」も労働者の賃金と変わらない分を確保するとする。そこ
から貯蓄をし、必需品や贅沢品を買う。一方、企業を起業したときは固定資産
分が負債となるとする。毎期、固定資産は残存価格なしで定額法で減価償却さ
れるとする。毎期この賃金と償却分は社会的負債に付けかえてよいことにする。
会社の利益はまず個人の負債を返すのに使われ、それ以上はすべて社会的負債
の返却に使うこととする(赤字であればすべて社会的負債になる)。


** 実験

これまでの議論を総合して作ったのが micro_economy_1.py である。使った
Python のバージョンは 3.6.4、SciPy は 1.0.0。これを動くまで持っていくに
は、バグを取るのはもちろん、例えば、価格の範囲を 1 から 1000 の間に制限
したりする必要があったりした。しかし、それで思った通り動いたかというと
そうではない。

初期値として [賃金, 必需品, 贅沢品, 原料] の価格が [30, 10, 15, 15]、貯
蓄は平均 10 の指数分布の乱数で与え、失業者数は 1000人中 300 人として、
とにかく20期、動かしてみた結果のログが(途中省略して)次のようになる。

<pre>
$ python micro_economy_1.py
Acronyms: W: Wages, N: Necessaries, L: Luxuries, I: Ingredients.

OptForStep: iterated 354 times score=-10091.663249003372
Companies N:2, L:1, I:2
[Type] [OwnerId] [ProfitRate]
N 4 0.6464061520432376
N 0 0.5398981085921184
L 3 -0.4693981403076306
I 4 0.3890054894418247
I 1 0.4552044030220315

Increase of Social Debt: -41648.3813700879
Price W:24.117976351346208, N:12.71757042603145, L:8.490434756232888, I:17.502720924647342
Worker's Savings Increase: 2.8301426929739364
Supply of Labors = 659
(Demand - Supply) of Labors = -8.845901365632926
Profit Rate N:0.6464061520432376, L:-0.4693981403076306, I:0.4552044030220315
Product N:1682.261006620607, L:508.0, I:1179.3961158798008
Savings mean:7.123712162563456, variance:56.036152802783974

OptForStep(Fail): iterated 434 times score=-10023.034742576805
Companies N:3, L:1, I:3
[Type] [OwnerId] [ProfitRate]
N 4 0.5692171840533023
N 0 0.4796735066944609
N 3 0.5072608323075326
L 3 -0.6331127886653873
I 4 0.5008517300585492
I 1 0.5822854722290667
I 2 0.4967528319755297

Increase of Social Debt: -29867.906983487737
Price W:24.104261951222355, N:13.68336071886696, L:6.3961219154413085, I:20.375282363400267
Worker's Savings Increase: 2.2434384293723397
Supply of Labors = 644
(Demand - Supply) of Labors = -7.102309758557908
Profit Rate N:0.5692171840533023, L:-0.6331127886653873, I:0.5822854722290667
Product N:1605.609037929279, L:515.0, I:1188.7162160814187
Savings mean:5.294845251329998, variance:40.21842122854789

：
：(途中省略)
：

OptForStep: iterated 67 times score=-11945.151089968967
Companies N:7, L:1, I:11
[Type] [OwnerId] [ProfitRate]
N 1 -1.0
N 3 -1.0
N 1 -1.0
N 0 -1.0
N 1 -1.0
N 3 -1.0
N 3 0.0017767916634080928
L 0 -0.9124559175922721
I 2 0.4383446515964115
I 3 0.46464649016358484
I 4 0.2931006298619478
I 3 0.31370011667054504
I 2 0.15686696468470215
I 3 0.18059678503444124
I 0 0.1380200621047454
I 1 0.1646298989601593
I 0 0.12085664202468203
I 1 0.14584078296272854
I 3 0.1724042806996111

Increase of Social Debt: -52964.17361935915
Price W:23.482049217481375, N:17.37946471154916, L:2.1750598365291447, I:32.74557654522276
Worker's Savings Increase: 1.2916032687826373e-09
Supply of Labors = 493
(Demand - Supply) of Labors = -0.47052139378268976
Profit Rate N:0.0017767916634080928, L:-0.9124559175922721, I:0.46464649016358484
Product N:1357.8933444703962, L:7.0, I:2171.29069018655
Savings mean:3.0360519738180525, variance:3.8439410663385103

</pre>

これでもそこそこうまく行っているほうである。省略したが途中で最適化が失
敗したりもしていた。しかも、何回もやり直すと、乱数の変化によって同じ初
期値でもかなり違う結果になる。シミュレーションとして成功しているとはと
ても言えない。


贅沢品の価格が下限である 1 に貼り付いたり、今回はそうではないが、贅沢品
の生産数がほとんどの期で 0 になるような現象が起きることがある。必需品は
労賃の下限を規制し、原料は原料自身を規制し、贅沢品は新規貯蓄を規制す
る…。だから、贅沢品の利益の最適化が効いて新規貯蓄はある程度、確保され
るだろうと想定していたが、まったくそうなる気配がない。

どうもこれは貯蓄という時間を加味した概念のせいで、別に新規貯蓄をスコア
に加味する必要があるのではないかと、新規貯蓄の項をスコアに加え、その倍
率を変えたりしたのだが、そうすると、他が上限の 999 に行ったり、かなりシ
ステムが不安定になった。

しかたなく労働の供給のところで、「新規貯蓄が 0 以下の場合は、労働供給は
なされない」というところを「新規貯蓄が賃金の 1/3 以下の場合は、労働供給
はなされない」と変え「チューンアップ」した。最低限文化的な生活ができる
最低賃金を設定した感じだろうか。

もしかすると、このような時間要素が絡むものには別の最適化が必要なのかも
しれない。変動があまり起きないように保守的になるようスコアをいじったり、
新規貯蓄の何分の一を求めるかを最適化のパラメータに加え、それを贅沢品の
企業の利益の時間平均したものに連動させて動かしたり…といったことが可能
なのかもしれない。そのあたり、何か理論があるのかもしれないが、最適化に
詳しくない私は知らない。とにかく、上に書いた以外、そういったことは今回
はせず、今後の課題とした。


ほかに、労働需要 - 労働供給が結構大きな値になったりするのが気になる。荒
療治として (労働需要 - 労働供給) ** 2 を例えば 500 倍ぐらいすると、そう
いうのはピタッとやむ。ただ、ここだけが問題となって変数が動く余裕がなく
なるのも問題なので 500 倍ではなく 3 倍に「チューンアップ」した。


さらに、他の分野では利益が出ているのに、ある分野では利益が出ず赤字企業
が一社でずっとガンバル…みたいな状況によく陥るのも気分が悪い。これは利
益を単純に足しているためで、一つの分野が悪くても他の分野がよければその
分野に集中するということが起こっているからだろう。

そこで単純な利益ではなく、分野の会社ごとの平均の利益(のマイナス)をスコ
アに加えることにした。ただ、これでもマイナスの利益が頻出するので、マイ
ナスの利益が出ている分野は、そのスコアの損失が 10 倍になるように「チュー
ンアップ」した。


以上のような「チューンアップ」をほどこしたのが micro_economy_2.py であ
る。(実は micro_economy_2.py を徐々に作ったあと、そこでの結果をフィード
バックして、元の姿を取り戻させたのが今の micro_economy_1.py になる。)

その実行結果は次のようになる。

<pre>
$ python micro_economy_2.py
Acronyms: W: Wages, N: Necessaries, L: Luxuries, I: Ingredients.

OptForStep: iterated 381 times score=199.14451826752122
Companies N:2, L:1, I:2
[Type] [OwnerId] [ProfitRate]
N 2 0.15785712173309763
N 4 0.06000000142191066
L 1 0.022531117948959137
I 1 0.14371062526667935
I 4 0.0952181654287593

Increase of Social Debt: -9439.585871854228
Price W:27.665544186369424, N:8.42616407566005, L:16.06006543360048, I:14.708153325601893
Worker's Savings Increase: 9.22184806785054
Supply of Labors = 677
(Demand - Supply) of Labors = -23.519479027346506
Profit Rate N:0.15785712173309763, L:0.022531117948959137, I:0.14371062526667935
Product N:2199.804612475398, L:143.0, I:1321.7896276112863
Savings mean:14.366558311863528, variance:60.983399128998435

OptForStep: iterated 174 times score=-1302.607431756639
Companies N:3, L:2, I:3
[Type] [OwnerId] [ProfitRate]
N 2 0.184573312550856
N 4 0.09497140367468562
N 1 0.12878264187785823
L 1 0.06202481418393208
L 1 0.12081190075306245
I 1 0.10755293413896723
I 4 0.06846321706064229
I 1 0.11069872789188746

Increase of Social Debt: -9097.65054502226
Price W:27.820179381017276, N:8.531461651432085, L:16.734051113263384, I:14.213954706850094
Worker's Savings Increase: 9.28601871761191
Supply of Labors = 679
(Demand - Supply) of Labors = 0.3296904460578389
Profit Rate N:0.184573312550856, L:0.12081190075306245, I:0.11069872789188746
Product N:2183.3106949025205, L:228.0, I:1374.821164469151
Savings mean:16.90846601705912, variance:66.1866623725694

：
：(途中省略)
：

OptForStep: iterated 172 times score=-690.3138436451507
Companies N:8, L:11, I:2
[Type] [OwnerId] [ProfitRate]
N 1 0.11079495316511993
N 3 0.1419682710163418
N 1 0.16831510437478583
N 0 0.15649575081955516
N 1 0.18572646681909302
N 3 0.2148881435495164
N 4 0.08780107321425604
N 3 0.10752348438347388
L 4 0.7900641956200828
L 3 0.7573857249594464
L 4 0.6338394879033661
L 3 0.6305024343449366
L 1 0.6158272798213816
L 2 0.5080590847399747
L 0 0.4915681937735938
L 3 0.5389468132269766
L 1 0.54006641645961
L 2 0.38065674637457325
L 0 0.34991402750855927
I 2 -1.0
I 1 0.034486188374192886

Increase of Social Debt: -21076.69231147747
Price W:21.507096423871268, N:5.666779542210449, L:31.13078545560748, I:10.25336993188364
Worker's Savings Increase: 8.216129843877951
Supply of Labors = 642
(Demand - Supply) of Labors = -0.639035539853694
Profit Rate N:0.2148881435495164, L:0.7900641956200828, I:0.034486188374192886
Product N:2357.1450615640033, L:135.0, I:2139.6432464962945
Savings mean:19.37009799829607, variance:130.21863585528772

</pre>

こちらでも初期値を少しいじると大きく結果が変わったり、同じ初期値でもラ
ンダム性によりかなり結果が変わったり、最適化が失敗することがあったり、
贅沢品の生産が 0 になったりづることすらある。しかし、この回では、必需
品・贅沢品・原料の企業がバランス良く成長しているように見えた。


蛇足として、スコアを上述のものの替わりに社会的負債そのものにした実験が
micro_economy_1sd.py である。ここには結果を示さないが、とても不安定なも
のになった。


** 結論

わからないところや不明なところがあればソースを読んで欲しい。はじめてプ
ログラムをする方などは面食らうかもしれないが、そんなに難しいことはして
いないので読めると思う。思いたい。

当初の動機にあった機械高度化に関する議論に致る前の前の段階で、ただ、安
定して動くことすら難しいところで終ったのは悔やしい。ランダム性はあって
も、こんなにカオス風に動くとは想定していなかった。当初、どの分野もまず
利益が出るだろうと思っていたら、それすら難しそうなのには驚いた。これで
は次の理論的な解析に進めない。

こんな状況の Toy プログラムを公開して意味があるのか…と迷いもしたが、グ
グると案外、このようなシミュレーションはなされていなさそうなので、他の
方が「失敗事例」として参照できるよう公開しておくことにした。もし万一、
ここから発展させて何か成果を出せる人が出たとしたら、私はうれしい。その
人が優秀であることを私は疑わない。


** 追記: 労働供給に関する資産効果の補足説明

上の「動機と目的」の以下の部分、自分でも意味がよく取れなくなっていたの
で再考した。

  * 労賃は下がり労働需要が回復するというところ、産業予備軍との関係はど
    うなる。必要生活費が減ると、働かなくて済む可能性が増えるという点で
    は産業予備軍数を増やすように思われるが、働く意思のあるという点だと
    予備軍を減らすようにも思える。

物価が下がって、実質賃金が上がっているというとき…、

  * 労働者は、賃金が上がっているので働こうとする。

  * 失業者は、物価が下がって実質貯蓄が増えたため、働こうとしない。

労働供給増 = α * 実質賃金増 - β * 実質貯蓄増 で表せるということでは
ないか？

資産・貯蓄総額の大きさによって物価減の影響は変わってきそうではある。た
だ、個人個人によって働きはじめる実質貯蓄額や実質賃金額は違うということ
もありそうである。

働きはじめの実質貯蓄額や実質賃金額は変化していくのではないか。より貯蓄
を欲するようになるといった感じに。また、どれだけ贅沢品をこれまで買えた
かでも変わってくるのではないか？ 希望実質貯蓄額が大きい者は、贅沢品もな
かなか買わないのが自然だろう。

そういった細かいことまで、モデルに組み込むのは難しい。だから、個人の貯
蓄総額についてはとりあえず考えず、実質貯蓄増の割合だけを問題にすればよ
いのではないか？ 実質貯蓄増は、必需品価格変化によって代替できると考える。
すると、上で書いたように、労働供給は、(今期・前期の新規貯蓄を S_i・
S_{i-1}、今期・前期の必要生活費を N_i・N_{i-1} として)

  q = r * ((S_i - S_{i-1})/S_{i-1}) + (1 - r) * ((N_i - N_{i-1}/N_{i-1}))

をもととすればよいのではないか。

ややこしいがここでは、新規貯蓄増のほうが、実質賃金増に対応している。新
規貯蓄増は、賃金から必需品を引いたものだから、それに近いと考えるのであ
る。



** 参考

Python については私はまだ初心者で、ネットの情報にいろいろお世話になった。
マルクス経済学以外のミクロ経済学については、以前にいろいろ読んでいてお
世話になっているが、特に今回これといって参考にしたわけではないので、こ
こに書名は出さないでおく。

  * 『経済原論』(富塚 良三 著, 有斐閣大学双書, 1976年)。このシミュレー
    ションのキッカケとなった本。…といってもこの本を勧めることはしない。
    正直、クドい。「経済原論」では、平井規之他の有斐閣Ｓシリーズの本が
    私にはわかりやすかった。

    https://www.amazon.co.jp/dp/4641093148

  * 《外作用的簡易経済シミュレーションのアイデアと Perl による実装》。
    simple_market_0.pl。私が以前書いた経済シミュレーション。今回以上の
    独自理論に基づく、ほぼ私にとっての「黒歴史」。更新したいがいつにな
    ることやら…。

    http://jrf.cocolog-nifty.com/society/2011/01/post.html


（なお、上の実験結果はバージョン 0.0.4 によるもの。）



	ミクロ経済学の我流シミュレーション
	その２ バランス戦略


** バランスを取る

その１では、経済がよくなるよう利益に関してスコアを最小化するよう最適化
していったわけだが、もう少し一般的に、複数のプレイヤーがいて、それぞれ
がスコアを最小化しようとしていることを考えたい。

それぞれのプレイヤーが独立ならば、それぞれのスコアを足し合わせたものを
最小化すれば、その要素に含まれるプレイヤーごとのスコアも最小化している
はず…となる。

もし、プレイヤーどうしに利害の対立があれば、どうすればよいか。利害が重
なるところは、それぞれの力が「釣り合う」ところで決まるとでも考えるとす
れば、それはバランスに関するパラメータを新たに定義し、それをスコアに加
えることになる。そうではなく、もし、力関係が決まっていて、常にどちらか
の利益を重視するなら一方だけをスコアに加えたり、バランスを取るときに重
みを付けたり、運で決まるというなら、ランダム性を加えたりすればよい。

バランスを取るときは、具体的には、スコアの分散などをスコアに加えること
になる。ある程度、バランスを見るが利益の最大化を行うといった場合、利益
とバランスのどちらをとるか、スコアの分散などを加えるときの係数で調整す
ることになる。

今回は、基本、バランスを取るために必需品・贅沢品・原料の各分野のごとの
利益に関して分散を取り、それをスコアに足すことにした。

micro_economy_3.py は各分野ごとの企業の利益率の平均値に関してバランスを
取っている。利益に関する部分のみスコアを取り出すと、r_N, r_L, r_I をそ
れぞれ必需品・贅沢品・原料の平均利益率とすると

<pre>
  スコア１ = - mean([r_N, r_L, r_I]) + λ * variance([r_N, r_L, r_I])
</pre>

とする。ここで λ は定数(または r_* に関する変数でもよいかもしれない
が…)で、いろいろ試した結果 λ = 100.0 としている。

さらに、スコアには労働需要と労働供給に関する部分を足さないといけない。
よってスコアには次のような項を足さないといけない。

<pre>
  スコア２ = μ * (労働需要 - 労働供給) ** 2
</pre>

この μ も少しだけいろいろ試した結果 μ = 0.01 とすることにした。上の
スコア１がだいたい小数点第1位くらいの数字になるため、それより大きけれ
ばよいかと思ったが、あまり大き過ぎても動きが封じられるようで、いけない
らしい。

<pre>
  スコア = スコア１ + スコア２
</pre>

実行結果は省略するが、micro_economy_2.py で導入した新規貯蓄を強制的に残
す措置は必要なくなった。その１の実験で否定されたように思われた「贅沢品
の利益の最適化が効いて新規貯蓄はある程度、確保されるだろうと想定」した
ことは必ずしも間違っていなかったようだ。

初期値にもよるが、その１と同じ初期値であれば、かなり安定した経済になる。
(失業者の初期値が 300 ではなく 200 にすると不安定になるようだ。なぜ？)


** 贅沢品の価値を上げ、経済を成長させる。

新規参入は一分野につき1期1社ずつしかできないのがこのモデルだった。そし
て、企業は固定資本を10期で償却して退場する。そのため、一分野の最大の企
業数は 11 を超えることはない。

さきの micro_economy_3.py ではどの分野も企業数が 10 か 11 になるのが常
だった。経済を分析するなら、ずっと 10 か 11 ではなく、中間的な値(5 とか
6 とか)を取るような状態が現れるようにしたい。

このモデルにおいて、経済が「成長する」とはどのようなことだろう？ 労働
者の所得が上がることだろうか？ しかし、必需品の価格が上がればそれは意
味がなくなる。

必需品は高くならないようにということであれば、新規貯蓄が増えることだろ
うか？ その場合、贅沢品がよく売れるようになるはずである。よって、贅沢品
の利益率が大きくなればいいのだろうか？ しかし、バランス戦略を取れば、
贅沢品だけ利益が増えるわけにはいかない。

贅沢品が他に比べて高くなればよいのではないか？ つまり、贅沢品がより原料
を多く使うようになればいいのではないか？ そうだ！ そうしよう…と改造し
たのが micro_economy_4*.py のシリーズである。

すべての分野の企業数が 5 を超えたとき、贅沢品の原料率(プログラム内では
ingredientsLevelForLuxuries)が 1 から上に変化するとし、それも最適化の
数値に加えることにした。

<pre>
  スコア３ = - (贅沢品の原料率 - 1)
    ただし、贅沢品の原料率 > 1 で、贅沢品の生産が 0 でなく、
    贅沢品の企業の利益率が正である企業が存在し、
    各分野それぞれ企業数が 5 を超える場合に限る。
    そうでないときは、
    スコア３ =1000 * (贅沢品の原料率 - 1) ** 2

  スコア = スコア１ + スコア２ + スコア３
</pre>

原料率が 1 より上に変化をはじめると、そこにスコアの「エネルギー」がふり
むけられるため、企業の利益率は自然に下がり、「市場利子率」と目される標
準的な利益率 6 %に近くなり新規参入がなかなか起きなくなると考えた。

ところがこれがなかなかうまくいかない。そのため、各分野の利益率の計算方
法をいろいろみなおした。

利益に偏りがあると新規参入が起きるのが実際の経済であろう。そのためには
単純に利益率を平均したものではなく、一分野の総利益(gross profit)を総コ
ストで割ったものをバランスすれば、新規参入が起きやすく企業数のバランス
が取りやすいと考えて作ったのが、micro_economy_4gp.py である。

新規参入は最大利益率で判定されるので、各分野の最大利益率でバランスする
ようにしたのが micro_economy_4mx.py である。

まぁ、そうはいいながら、いちおう試しに作っておくかと、平均利益率でバラ
ンスするようにしたのが micro_economy_4mn.py である。

企業数がそれぞれ 5 を超えたら、あとは「市場利子率」を超えてえればよく、
それ以上は問う必要はないのではないか？ 企業数が少ないうちは平均利益率で
バランスするが、すべて企業数が 5 を超えたら、r_* が「市場利子率」を超え
た分は丸めて r_* を「市場利子率」と等しくしてバランスを取る。そのよう
にしたのが micro_economy_4.py である。

実験してみる。ループは 100 回してみた。意外なことに一番まともな結果を
残したのが、micro_ecomony_4mn.py で、次に micro_ecomony_4.py で、期待
していた micro_economy_4gp.py はむしろ結果がよくなかった。

「結果がよくなかった」とは、何かのパラメータがほぼ 1 や 1000 になって経
済がクラッシュした状態になり、(労働需要 - 労働供給) がプラスマイナス
100 を超えることが繰り返され、そこから復活しなかったり、贅沢品の売り個
数が 0 になった状態が継続するようになったりすることを言っている。

「結果がよい」ものも、贅沢品の原料率は予想に反して激しく上下動すること
はなく、じわじわと上昇していくトレンドとなった。(経済がクラッシュしたと
きや経済が不調になって企業数が減ったときなどは 1 に戻るが。)

ここで、もう少し改良することを考えてみる。贅沢品の原料率を増加させても、
原料の賃金率(workersLevel)が低くならなければ、結局、贅沢品の個数を下げ
ることで対応するしかないのではないか？ そこで、すべての分野の企業数が
5 を超えたとき全体の賃金率に 0.95 をかけるようにしてみた。それを試すの
が、micro_economy_4*.py の --update-workers-level オプションである。

しかし、確かに結果は変わるが、より不安定になるだけ、どのような改善があ
るのか私は観測できなかった。


** とりあえずの結論

さて、今回やったことの実際の経済に関する示唆は何なのか、よくわからない。

バランスを取るとしたわけだが、実際の経済では経済力の釣り合いはあるとし
ても多業種間でバランスを取るような動きは基本ない。銀行などがもしかする
とやっているのかもしれないが、実際にあるのは、業種間のバランスより、む
しろ、過去実績とのバランスだろう。そういう面を取り入れるモデルにしたほ
うがよかったかもしれない。今後の課題としたい。

経済がつぶれたところから自動的に回復しない。0 や 1 や 1000 などのパラメー
タの境界に近付いたとき経済やスコアをどうすればいいのか、もっと詰めて考
えるべきだろう。また、それと関連しているのだと思うが、初期値を変えると
かなり不安定になることがある。このあたり、どういうとき不安定になるのか、
解析できればカッコイイのだが、私にはどうも難しい。

最適化の本を読むと難しいことが書いている。本来は、(偏)微分等を考えて、
極小が最小になってるか等を確かめないといけないのかもしれないが、やって
ない。贅沢品の原料率がジワジワ上がるというのは、少し異常な気がするので、
最適化そのものがうまくいっていない予感がある。

上で λ や μ を実験からなんとなく指定したが、そういうパラメータを最適
化するよう人工知能(AI)を使うとかできたらカッコイイ。そういうパラメータ
も含めて最適化するようなループがかけるべきなのだが、私にはできそうにな
い。これからも私自身、人工知能に関する勉強等はするつもりだが、他の人が
やっていただけるとありがたい。

または、今回までぐらいの内容はきっとどこかで誰かがやっているはずなので、
参考文献を教えていただけたらと切に願う。

その１の反応はほとんどなく、この記事を読んでくださる方も稀だろう。読ん
でいただいた方には感謝しかない。

とにかく、ありがとうございました。


（なお、上の実験結果はバージョン 0.0.4 によるもの。）


** ライセンス

パブリックドメイン。 (数式のような小さなプログラムなので。)

自由に改変・公開してください。



	ミクロ経済学の我流シミュレーション
	その３ log 戦略


** 概要

micro_economy_1.py などはよく「発散」してしまうが、「発散」を防止するに
は、急な価格上昇に対して「弾力的に」需要が減ればよい。そのための方法と
して、スコアの計算に log 関数に似た関数をかませることにした。

分野の一方がプラスで一方がマイナスといった極端な例はほぼなくなったが、
しかし、思ったほど(micro_economy_3.py ほど)バランスは取れなかった。


** はじめに

これまでのシミュレーションで、価格が 1 や 1000 などの極端に振れる「発
散」が何度か現れた。micro_economy_1.py が特に顕著である。

労働市場の特徴より、すべての分野の利益をいきなり上げることはできない。
労働コストが高くなり過ぎるからである。どれかを犠牲にするなり、どれかが
伸びすぎないようにすることが必要である。労働コストも上がっても、すべて
の価格が上がり、インフレ的にバランスが取れることがありえるかというと、
このモデルでは、労働人口が足りなくなり難しいはずである。

つまり「発散」を抑えるには、ある分野を犠牲にしてマイナスになるまで下げ
て、別の分野をプラスにしてもスコアがよくならないようにすればいい。また、
マイナスにせずとも、すでに高い分野の利益を上げるよりもまだ上がり切って
ない分野を上げたほうがスコアが増えるようにすれば、分散を最適化に組み込
んでバランスを「無理矢理」取らずとも、自動的にバランスが取れるのではな
いか？

このような特徴を持った関数として log 関数が挙げられる。マイナスの利益に
ついては、倍率が高く、プラスの利益については倍率が低くなる。さらに、一
分野だけプラスの利益を増やすよりも、他の利益を増やすほうが増分が大きく
なる。これによりある種の「弾力」が表せる。「弾力」とは上方向に伸びよう
とすると上から抑えられるイメージをそう呼んでいる。

もう少し具体的には、log 関数は、利益率に関してかけるようになる。利益率
は 売上 - コスト / コスト で、売上が 0 のとき最小だから最小値は -1.0
になる。log(1+r) とすればよさそうだが、r = -1.0 のときはマイナス無限大
となり、最適化がうまく動かない。そこで、log そのものではなく、その形に
似た別の関数を考える必要がある。

そこでいろいろ考えた関数が、score_transforms.png の図になる。それを一つ
一つ説明していこう。

まず、log(1+x) であるが、図では log と書いているものである。これは、x
= -1.0 のとき無限大になるので使えないということだった。

次に順番は前後するが、図で exp と書いたもの。y = - b * exp(-a * x) + b
を考える。-1 のときの切片を - c とすると、a = log(1+(c/b)) が求まる。x
→ - 無限大のとき、上は b で抑えられる。b = 1、c = 5 が図に示したものと
なる。しかし、この関数の場合、プラス側がほぼ b に張り付いてしまい、勾配
が計算されず学習がうまくいかなくなるかもしれない。log 的な特徴も欲し
い…。

ならばと、log を少し動かしたのが log1.1 になる。y = b + a * log(x + 1
+ c) として、原点を通るから、b = - a * log(1+c)。dy/dx = a/(x+1+c) で、
x = 0 のとき dy/dx = 1 とすると a = 1.1 となる。これは原点付近がなだら
か過ぎるかもしれない…。

exp と log のハイブリッドにしよう。それが hybrid になる。マイナス側は
exp でプラス側は log にする。プラス側は、 y = 0.2 * log(x + 0.1) - 0.2
* log(0.1) が良さそう。これは x = 0 で dy/dx = 2 になる。

マイナス側は y = - b * exp(- a * x) + b で、x = 0 で dy/dy = 2 となり、
x = -1 の切片が - c であるとすると、c = 2 * (exp(a) - 1) / a になり、簡
単に a を求められない。が a = 2, b = 1 とすると、c = 6.3890... と求まる。
これを使うことにした。(Google 検索のグラフ機能で c = 6 〜 10 で、a が適
当な値になるものを目で見て求めた。)

プラス側は、傾きが急なのがいいのか緩いのがいいのかはよくわからない。そ
こで、傾きが急になる hybrid0.2 として、プラス側が y = 0.4 * log(x +
0.2) - 0.4 * log(0.2) なものを作る。これは x = 0 のとき dy/dx = 2 で連
続する。

一方、傾きが緩い hybrid0.1 として、プラス側が y = 0.1 * log(x + 0.1) -
0.1 * log(0.1) となるものも試す。なお、これは、x = 0 のとき dy/dx = 1
で、連続ではない。連続ではないものの例ともなる。


** 実験

上のグラフの形の他にいくつかプログラムの動作を決めるオプションがある。
まず、今回の Python のスクリプトの名は micro_economy_5.py。そして、上
のグラフの何を使うかはオプション --score-transform で指定し、
log, log1.1, exp, hybrid, hybrid0.2, hybrid0.1 が指定できる。デフォル
トは、--score-transform=hybrid である。

また、労働需給の効果をどれぐらいにするかを指定するオプション
--score-labor-mag もある。これは大きいとその効果を厳しく見ることにな
り、小さくすると最適化に余裕ができることになる。デフォルトは
--score-labor-mag=0.01 である。

さらに、スコアの平均を分野ごとに取るのであるが、分野ごとの利益率をどう
扱うかのオプション --score-mean がある。方法としては、分野ごとの最
大値を取る max, 平均を取る mean, 分野の垣根を取りはらい個々の会社全体
でスコアの平均を取る each が指定できる。デフォルトは
--score-mean=max で、一番、最適化に余裕ができる設定のはずである。

試すと、--score-transform では log にするとプログラムが動かないの
は予想通り。その他では hybrid が最もバランスが取れて良さそうだが、他も
そこまでダメじゃない。exp が案外、利益率にマイナスを許すことが多いのは
なぜだろう？

次に --score-labor-mag は、0.00001 ぐらいにして、ようやく普段 10 人
以上の余裕が出てくる感じだが、最適化がうまくいかないときは、0.1 でも
10人以上の差が必要になるようだ。経験的には 0.001 ぐらいで良さそうに思
う。

そして、--score-mean については each だと厳し過ぎる。mean について
は max より余祐はないはずだが、each ほどの厳しさはなく max からあまり変
化はないようだ。

…と実験の概要を述べたところで、実際の実験結果の一部もコピペしておこう。
下はデフォルトのパラメータで行った結果である。

<pre>
$ python micro_economy_5.py --score-transform=hybrid --score-labor-mag=0.01 --score-mean=max
Acronyms: W: Wages, N: Necessaries, L: Luxuries, I: Ingredients.

OptForStep: iterated 254 times score=-0.2557086491722858
Companies N:2, L:2, I:2
[Type] [OwnerId] [ProfitRate]
N 1 0.3357480139283765
N 4 0.22621168164938685
L 2 0.21032889725048914
L 3 0.3174388843010281
I 2 0.12453800881110703
I 3 0.15468502083026284

Increase of Social Debt: -28610.180515082953
Increase of Total Savings: -163.00580738030476
Price W:25.131461918946833, N:8.723093011626204, L:18.304072771470736, I:13.058076848709304
Worker's Savings Increase: 6.348646484480813
Supply of Labors = 656
(Demand - Supply) of Labors = 0.02443343472941706
Profit Rate N:0.3357480139283765, L:0.3174388843010281, I:0.15468502083026284
Product N:2163.9949827978794, L:227.0, I:1259.691785324613
Savings mean:9.849737510655533, variance:44.50510597845271

OptForStep: iterated 93 times score=-0.2668802423994038
Companies N:3, L:3, I:3
[Type] [OwnerId] [ProfitRate]
N 1 0.38995424378048316
N 4 0.2889233452501982
N 2 0.17280874411961922
L 2 0.21924676873511104
L 3 0.36990031432079956
L 2 0.2953629040004177
I 2 0.0992155670763938
I 3 0.13794275221049332
I 0 0.11507314562616924

Increase of Social Debt: -21298.503946068828
Increase of Total Savings: -157.51250866063856
Price W:25.547537888114316, N:9.19445072945831, L:19.180685449311273, I:12.991765978210744
Worker's Savings Increase: 6.391651820357481
Supply of Labors = 662
(Demand - Supply) of Labors = -0.031463796653383724
Profit Rate N:0.38995424378048316, L:0.36990031432079956, I:0.13794275221049332
Product N:2093.8352996351123, L:230.0, I:1335.0512233768636
Savings mean:9.70214956123946, variance:41.81110723560632

：
：(途中省略)
：

OptForStep: iterated 254 times score=-0.26539494066806646
Companies N:5, L:6, I:6
[Type] [OwnerId] [ProfitRate]
N 4 0.30911986527611657
N 2 0.1942226485171729
N 3 0.2164732723367654
N 3 0.23758612578681754
N 0 0.12223165038757512
L 3 0.5452855783440985
L 2 0.46537109935767507
L 1 0.5144675179200853
L 0 0.4882344542486531
L 2 0.39023999444253965
L 1 0.4375321719516719
I 3 0.08008803639671597
I 0 0.06121032484976638
I 1 0.10290476238676771
I 4 0.04515843996954547
I 3 0.05989645377468558
I 1 0.10018012522087838

Increase of Social Debt: -5981.21818225224
Increase of Total Savings: 254.1203429116813
Price W:26.364227979289574, N:9.202525204456183, L:21.77774740414562, I:12.442836260579888
Worker's Savings Increase: 7.2585789850459825
Supply of Labors = 675
(Demand - Supply) of Labors = 0.004624815909323843
Profit Rate N:0.30911986527611657, L:0.5452855783440985, I:0.10290476238676771
Product N:2086.511779388219, L:215.0, I:1546.499816535113
Savings mean:9.649201148569894, variance:48.49235766261805

：
：(途中省略)
：

OptForStep: iterated 137 times score=-0.2529055674110597
Companies N:9, L:10, I:8
[Type] [OwnerId] [ProfitRate]
N 0 -1.0
N 3 0.004382705440974293
N 3 0.02336916535510581
N 0 -1.0
N 1 0.019682369596810304
N 1 0.05014497877633316
N 0 0.07633301459027723
N 3 0.09773986474657112
N 0 0.09724330177126622
L 4 0.5933041288573384
L 2 0.42814694534480247
L 0 0.3837064309893382
L 1 0.3970509637268753
L 4 0.2923160365673788
L 1 0.29294960364357814
L 2 0.1694829937693616
L 3 0.20330424269446068
L 0 0.12294752561007138
L 1 0.1417093448052757
I 1 0.16838513614747008
I 4 0.09222387773826855
I 1 0.12523433373396956
I 3 0.14818848610957958
I 0 0.16501268428939042
I 3 0.18421517685845598
I 1 0.22402687035456795
I 4 0.12643364974164012

Increase of Social Debt: -15735.967230471113
Increase of Total Savings: -425.0835658049982
Price W:26.647922486704473, N:8.092974788024758, L:25.607242122473444, I:12.684053653478175
Worker's Savings Increase: 8.623615640185747
Supply of Labors = 676
(Demand - Supply) of Labors = 0.03198855927576005
Profit Rate N:0.09773986474657112, L:0.5933041288573384, I:0.22402687035456795
Product N:2238.290474789986, L:250.99999999999997, I:2456.102821613179
Savings mean:10.70346057459159, variance:49.33583213165512
</pre>

利益率(Profit Rate)に注目して欲しい。micro_economy_1.py を元にしたのに
「発散」はなくなり、micro_economy_3.py のようにバランスを取っていなくて
も、マイナスの利益率になることは防がれている。が、micro_economy_3.py の
ようには、バランスが取れておらず、総じて、原料(Ingredients)の利益率が贅
沢品より弱く出ている。これはこの実験を何度か繰り返した中でいつも見られ
る傾向である。上の最後は違うが、原料が必需品よりも弱いのも常態で、必需
品は贅沢品より弱くなりがちである。少なくとも micro_economy_3.py ほど
「バランス」は取れていない。


** 結論

「発散」は防ぎ、利益率がマイナスになるのも防げたが、「バランス」は取れ
なかった。

スコアは平均だが、基本的に和であり、その総量が、バランスを取らないほう
が大きくなることがありうる…ということではないか？ 

これは実験の予想とは異なるが意味のある結果であろう。バランスが取れるこ
とを見こして log 戦略のようなものを取っていても、複雑な箱の中身によって
は、バランスが取れないことが普通にありうることを示している。


（なお、上の実験結果はバージョン 0.0.5 によるもの。）



	ミクロ経済学の我流シミュレーション
	その４ 最適化の失敗


** 概要

これまでも最適化関数が失敗(fail)を返すことはあった。今回はそのことでは
なく、最適化が成功したとしても、それが本当に全体として最適最良のものに
なっているかを問う。結論としては、そうなってなかったが、大きな問題では
ないと私は考える。


** 実験

micro_economy_5.py を元に実験する。最適化にはこれまで Nelder-Mead 法を
使ってきた。Nelder-Mead 法は初期値を必要として、そこから「アメーバ」の
ように動いて最適値を探り出す方法と言われる。

初期値にはこれまで、直近の最適化で得られた価格情報を(環境が変わる次の
回でも)渡していた。

それを、直近も含め過去のデータすべての中で一番スコアが良いものを初期値
とすることを試してみる。そうしてから初期値を選び最適値を得たものと、こ
れまで通り直近のものを初期値として選び最適値を得たものの二者の中で良い
ほうを結果として受け容れることにする。

そうしたものが exp_01_06.py (数値が 1-6 からはじまるのはそれ以外の実験
を他に私的には行っているから。)である。その実行結果は次のようになる。

<pre>
$ python exp_01_06.py
Acronyms: W: Wages, N: Necessaries, L: Luxuries, I: Ingredients.

OptForStep: iterated 200 times score=-0.22109930631128658
Companies N:2, L:2, I:2
[Type] [OwnerId] [ProfitRate]
N 1 0.34031978914966
N 2 0.22217046351487754
L 1 -0.0028149279337999684
L 1 0.06520801294283221
I 0 0.2824687838054689
I 2 0.24272845926872333

Score -0.22109930631128658 vs -0.22109930631128658
Increase of Social Debt: -16556.05650042524
Increase of Total Savings: -1345.3207072601544
Price W:25.19634074497627, N:9.83125002484438, L:16.006028640964608, I:15.948455079173653
Worker's Savings Increase: 5.3347579115945685
Supply of Labors = 657
(Demand - Supply) of Labors = -0.24971326478521405
Profit Rate N:0.34031978914966, L:0.06520801294283221, I:0.2824687838054689
Product N:2030.3512470037679, L:289.0, I:1329.297412974788
Savings mean:8.691460568853538, variance:37.207520536597116

：
：(途中省略)
：

OptForStep: iterated 153 times score=-0.2593138141848632
Companies N:7, L:6, I:6
[Type] [OwnerId] [ProfitRate]
N 1 0.2747278977332604
N 2 0.21138034912609832
N 3 0.23459753270847028
N 1 0.2693049233500547
N 3 0.2946833927871138
N 1 0.3316038641762035
N 0 0.22797953099094675
L 1 0.2666985290367451
L 3 0.30970641180107616
L 1 0.3428670146639742
L 2 0.26821562503211716
L 1 0.31257002327163136
L 4 0.21041516397626298
I 2 0.15590041629842527
I 4 0.08507144818545924
I 1 0.12304717500370566
I 4 0.04492497557033961
I 1 0.0807545128442661
I 3 0.09932622085271332

Score -0.2593138141848632 vs -0.25329423686151115
Increase of Social Debt: -16349.315158567348
Increase of Total Savings: 38.13528744313044
Price W:25.366061894534468, N:9.078691228352632, L:18.591647606103592, I:14.253770379788111
Worker's Savings Increase: 6.196911185913805
Supply of Labors = 663
(Demand - Supply) of Labors = -0.04818838454480101
Profit Rate N:0.3316038641762035, L:0.3428670146639742, I:0.15590041629842527
Product N:2122.0015063404117, L:219.0, I:1582.73660071398
Savings mean:8.610848405403493, variance:36.75617888154675

：
：(途中省略)
：

OptForStep: iterated 135 times score=-0.26223714004105286
Companies N:8, L:7, I:7
[Type] [OwnerId] [ProfitRate]
N 1 0.29244396712184145
N 2 0.23566608446312087
N 3 0.2593502229886645
N 1 0.294076625706582
N 3 0.32070440760596003
N 1 0.3577983350417849
N 0 0.2528094441634307
N 1 0.28655501693400803
L 1 0.256128639613569
L 3 0.3005402456307164
L 1 0.33232295285681723
L 2 0.2602145395353427
L 1 0.3024347324452003
L 4 0.20259364440895364
L 1 0.23119649304309295
I 2 0.15813075508962302
I 4 0.08722674093523698
I 1 0.1245850476434361
I 4 0.04679740182223427
I 1 0.08219542336210783
I 3 0.10112683282664274
I 1 0.13853618068829995

Score -0.26223714004105286 vs -0.255215643281806
Increase of Social Debt: -14475.106770311046
Increase of Total Savings: -516.485131217235
Price W:25.51490913416877, N:9.345638724259391, L:18.624829618030073, I:14.393997769293929
Worker's Savings Increase: 6.130244478898561
Supply of Labors = 664
(Demand - Supply) of Labors = -0.001307116232737826
Profit Rate N:0.3577983350417849, L:0.33232295285681723, I:0.15813075508962302
Product N:2084.5646352641784, L:247.0, I:1606.6156841634006
Savings mean:8.114132625035046, variance:23.675034764129972

：
：(途中省略)
：

OptForStep: iterated 167 times score=-0.2560672662065596
Companies N:11, L:11, I:9
[Type] [OwnerId] [ProfitRate]
N 3 0.3640884287024172
N 1 0.3946057950615205
N 3 0.4322948896683518
N 1 0.46682642686984094
N 0 0.367835812424522
N 1 0.39669951427370914
N 2 0.2640438213473595
N 3 0.29072550684964266
N 2 0.14813175873515116
N 3 0.17343654406118805
N 0 0.1938152752830297
L 3 0.33051419997034476
L 1 0.3320902869361515
L 2 0.30587979100695467
L 1 0.32422862694991267
L 4 0.26864783685305454
L 1 0.2656002474718675
L 2 0.1920078240597659
L 1 0.2208767673195521
L 0 0.19143950648297225
L 1 0.21574723260818923
L 2 0.10851988484292231
I 4 0.031161567629689052
I 1 0.06388648796920383
I 4 -0.002341381853045759
I 1 0.02958560932021403
I 3 0.04887358910124645
I 1 0.08388912418317676
I 0 0.03657719650007993
I 1 0.07058542580218657
I 3 0.09042968980867483

Score -0.2559778603714225 vs -0.2560672662065596
Increase of Social Debt: -9920.299195863583
Increase of Total Savings: 541.3437302681468
Price W:25.96611076893603, N:9.745238991899008, L:19.113359823855383, I:13.329027833003991
Worker's Savings Increase: 6.304695332917202
Supply of Labors = 671
(Demand - Supply) of Labors = -0.09835948907266356
Profit Rate N:0.46682642686984094, L:0.3320902869361515, I:0.09042968980867483
Product N:2027.6283146698324, L:200.99999999999997, I:1937.1168475570857
Savings mean:8.85893961585377, variance:33.969556961201334

：
：(途中省略)
：

OptForStep: iterated 158 times score=-0.2433030119521747
Companies N:11, L:11, I:9
[Type] [OwnerId] [ProfitRate]
N 2 0.1600320191309793
N 3 0.18228690986983306
N 0 0.20277166573081373
N 3 0.22667364416543498
N 1 0.2511043715230468
N 0 0.21061450833284473
N 1 0.2364013846467154
N 2 0.09921515655925044
N 1 0.1260993407149877
N 3 0.1536828247229325
N 1 0.178729562741382
L 0 0.3887094633547608
L 1 0.353971109048702
L 2 0.31760689540810577
L 3 0.35058949736999684
L 4 0.23238375825999893
L 3 0.24009847791837208
L 1 0.23446702058111255
L 3 0.3080631152985971
L 0 0.16937497529905748
L 3 0.20180940426476657
L 1 0.21070308384738717
I 3 0.034250635937710945
I 3 0.051167999240398526
I 1 0.08520542680289599
I 2 0.01855621240151779
I 1 0.05148110554295586
I 3 0.07229005354732305
I 0 0.0720739090148316
I 3 0.08960282963483238
I 1 0.1241557956609432

Score -0.2433030119521747 vs -0.24327241340226088
Increase of Social Debt: -16726.428482241055
Increase of Total Savings: 112.31802111858997
Price W:26.80642123621469, N:9.416033569902083, L:22.444757607895305, I:12.393553781437365
Worker's Savings Increase: 7.426859778703818
Supply of Labors = 682
(Demand - Supply) of Labors = -0.030253556900220246
Profit Rate N:0.2511043715230468, L:0.3887094633547608, I:0.1241557956609432
Product N:2068.4356231538964, L:221.00000000000003, I:2784.1110933127125
Savings mean:9.284616526329645, variance:34.629390242175184
</pre>

Score A vs B と書いているところに着目する。A が、過去すべてのデータか
らの最良のスコアを初期値にしたもので、B が直近のスコアを初期値にしたも
のである。だいたい A と B が同じか、A のほうが勝っている(スコアが少な
い)ことが多いが、まれに B のほうが勝つことがある。

つまり、最適化は常に本当の最適値をうまく求められているわけではないこと
を少なくとも示している。

過去のすべてのデータからの最良のスコアの替わりに、各価格が 1 から 100 ま
でのランダムに選んでその価格情法の配列 10 個から最良のものを選んでの最
適化にすることも実験してみた。exp_01_06.py に --opt-try=random の
オプションを与えたものがそうなる。

するとさすがにランダムの側が勝つことはなかった。

最適化の戦略をもっと一般的なものにしたほうが良いのかもしれない。SciPy
1.2 には、Global Optimization というものがある。これを利用してみる。
--opt-try に basinhopping の場合は bh、differential_evolution の場
合は de、shgo の場合は shgo、dual_annealing は da を与えると、先の
Score A vs B の A 側がそれで求めた最適値になる。これらは基本的には数値
の境界(bound)を与える必要があり、それは 1 から 100 の間とした。

なお、bh には境界の替わりに初期値を与えるものがあり、それは bh0 で指定
できるようにした。また、da には境界に加えて初期値を与えるものがあり、
それは da0 で指定できるようにした。これらに与える初期値は直近のデータ
である。

試したところ、bh と shgo はうまくいかないが、それ以外は、直近のデータ
から Nelder-Mead 法で求めたものより良くなることがあったが、常に良くな
るわけではなく、Nelder-Mead 法のほうが良いこともあった。しかも、「発散」
も、大きな変動もなかった。

shgo はとてつもなく早いが、うまくいってないのはパラメータをもう少し見直
すべきなのかもしれない。が、私は最適化に詳しくないので、その追求は今後の
課題としたい。

bh や shgo の失敗を鑑みると、初期値も与えていない de や da が成功するこ
ともあるのは逆にすごいのかもしれない。それらにおいても大きな変動がなかっ
たのは、モデルの安定性を示しているように思う。

なお、アーカイブには exp_01_06.py の実行結果をダンプした exp_01_06.log
を付けた。


** 結論

「最適化」は本当の最適化になっていなかった。

しかし、「最適化」が本当の最適化になっていないから、すなわち間違いとは
言い切れない。

それは実際の経済の「最適化」がどのように行われているかによるからだ。

もちろん、次に社会は「どのように最適化しているか」が問われるのかもしれ
ない。実際には、銀行などが何らかの動きをしている可能性はあるが、今回の
ような最適化アルゴリズムそのものは動いていないと見るべきだろう。そのあ
たりの考察は今後の課題…おそらくは他者に委ねたい…。


（なお、上の実験結果および exp_01_06.log はバージョン 0.0.5 によるもの。）



	ミクロ経済学の我流シミュレーション
	その５ 大改良


** 概要

大改良を行った micro_economy_7.py をリリースする。改良点は大きく以下の
通りである。

  * 企業数をだいたい５社で安定化させるため、standardProfitRate を商品価
    格等と同列に最適化パラメータに導入した。

  * 企業の優位性の重みづけに基づいて生産の分担を行うとき、「一製品あた
    り労働量」だけでなく、「一製品あたり原料量」についても見ることにし
    た。

  * 最適化するそれぞれの項目の連携をわかりやすくするため、最適化する項
    目をそれぞれ tanh でくくった。企業の利益率でなく社会的負債を少なく
    することを最適化に組み込んだ。これまでのさまざまな技術を統合し、オ
    プションで指定できるようにした。

以下、順を追って説明していく。


** 企業数の固定と資本家の競争

資本家どうしが競争することで、企業数が 1 よりも大きくなると同時に、その
数が資本家の数ぐらいに限られる…それが望ましい状態であると考えることに
する。ちなみに、今のモデルでは、資本家の数は 5 人で、最大の企業数は 10
である。

これは最適化するとき、企業の数が 5 を越えるまで最適化関数が増え、それ
以降は増えないとすることで実現できると当初考えた。しかし、それだけでは
うまくいかず、結局、新規企業の目安となる standardProfitRate について、
商品価格などと同じ最適化のパラメータとし、それを上下させることで企業数
がだいたい 5 になるようにできた。

問題は、これを正当化する論理である。企業数が 5 に保たれる裏で、資本家は
どういう競争をすれば、そういう最適化と「矛盾なくできるか」が問題となる。

企業の数を5ぐらいにするというだけなら、資本家がどうたらという議論はいら
ない。しかし、最適化が何がしかの競争の結果なされると考えるなら、資本家
というものを考える必要があるのではないか。そして、資本家がどう企業をも
つかという部分では、矛盾がないようにする必要があるのではないか。

つまり、社会は最適化したいこと(この例では企業の数を 5 ぐらいにする)があ
るが、それをどういう競争を通じて実現するかという問題があり、それは本来
は別のことなのではないかと私は考える。最適化のために、競争が目的を導か
ない場合は、いくらでもルールをいじっていいというのが通常の競争とは少し
違う。

社会の最適化を考えるには、ある「最適化」が可能なような競争ルールはある
か、最適化の結果はルールと矛盾がないか…を確認・証明する必要があるので
はないか？

導入した standardProfitRate というものの正体も謎である。中央銀行の貸出
金利の調整が近いのかもしれないが、それが自動的に最適化する意味は示唆的
と言えるかもしれないが、意味不明な部分がある。ただ、これが企業数を 5
で安定化させる確実で単純な方法であったというだけである。

なお、このような standardProfitRate を使用したくない場合
は、--fix-standard-profit-rate オプションを使えば良い。出力ではわずか
に standardProfitRate が変化しているように見えるが、内部ではちゃんと固
定されて計算がなされる。


** 生産の分担の改訂

実コストで売れゆきが変わるようにできないか…と思い、生産の理論を見直す
ことにした。「一製品あたり労働量」すなわち「賃金弾力性」だけでなく、
「一製品あたり原料量」すなわち「原料弾力性」についても見ることにした。
(「弾力性」という言葉の使い方が少し普通と違うかもしれないが、「一製品あ
たりの量」が弾力的なパラメータとして利用されることをここでは、示してい
る。)

《その１》と同じように、「優位性(superiority)」を A_i 、「一製品あたり
労働量(laborsPerProduct)」γ_i、賃金の変化量を Δ の他に、「一製品あた
り原料量(ingredientsPerProduct)」α_i と原料価格の変化量を Θ として利
用することにした。

重みは、A_i * (γ_i ** (- d_1 * tanh(c_1 * Δ))) * (α_i ** (- d_2 * 
tanh(c_2 * Θ))) をとし、重みによって生産の分担を行う。ちなみに、tanh
は発散を防止するため今回新たに導入したものである。(c_1, c_2, d_1, d_2
は設定できる定数。)


** 複数同時最適化のための tanh

まず、企業の利益率の最大化ではなく、社会的負債(social debt)を最小化しな
がら、なおかつ、分野の最大利益率のバランスを取るようなことを考えた。
micro_economy_1sd.py と micro_economy_3.py の統合である。

また、micro_economy_5.py のようなスコアの変形をバランスを取るのと同時に
行ったらどうなるかというのにも興味があった。micro_economy_5.py との統合
である。(さらに、exp_01_06.py で行った各種の最適化もいちおう使えるよう
にした。)

それらをするために、最適化項目の「粒をそろえる」ために項目をそれぞれ
tanh でくくり -1.0 か 1.0 の部分スコアになるようにした。さらに社会的負
債のような大きく変動する項目は、そのものではなく過去からの変動率を見る
ようにした(tanh でもくくった)。

最適化項目を順に述べる。

まず、社会的負債の一期前からの変化率である。一期前の絶対値が 1000 以下
の場合は 1000 で割るようにしている。tanh でくくる前にデフォルトでは
1000.0 を掛けている。

次に、労働需給に関して、(需要-供給)の二乗をし、需給が釣り合うようにし
ている。社会的負債には残業代等が含まれるので、この項がなくても良さそう
なものだが、これをなくす(--score-labor-mag=0 にする)と、変化が大きくな
りすぎ経済が安定しなくなった。tanh でくくる前にデフォルトでは、0.00005
を掛けている。

次に、《その３ log 戦略》の score_transform をしながら、各分野の最大の
利益率の「平均」を最大化するようにしている。が、これは社会的負債ですで
に考慮されているとできるためデフォルトでは tanh でくくる前に 0 を掛けて
使わないようにしている。

次に、その score_transform をした各分野の最大の利益率の「分散」を最小化
するようにしている。デフォルトでは tanh でくくる前に 10.0 を掛けている。

次に、企業数が 5 の場合最大になる部分スコア(カイ二乗分布の形)を tanhを
かまさずにスコアに組み込んでいる。組み込む際にデフォルトでは最大値が 1
になるように変形している。

次に、standardProfitRate が 0.06 に近づけるために、(standardProfitRate
- 0.06) ** 2 に tanh をかませたものを組み込んでいる。さらに最適化関数に
与えるstandardProfitRate の初期値を前の最大の利益率の平均にしている。こ
れがないとうまく最適値に向かう傾斜がつかないようだ。デフォルトでは
tanh でくくる前に 0.01 を掛けている。

最後に、賃金が必需品を買うにも満たない場合、労働供給を 0 ととりあえず内
部ではしているのだが、そのようなとき、特別なペナルティとしでデフォルト
では 100 をスコアに足している。これは、micro_economy_1sd.py のころは必
要だったものの、労働需給の釣り合いを組み込んでる今では必要ないと思われ
る。


** 実験

「中高年が必要のない仕事を「生産」するよりは、ニートになってベーシック
インカムでまかなうほうが、社会が効率的になるように私には思えたことがあっ
た。少ない額で公共事業ができるようになり、余った分を分配にまわせるので
はないか」…と考えた。

公共事業についてはまだこのモデルには組み込んでいないが、「中高年が必要
のない仕事を生産する」というのは、「一製品あたり労働量」が多いというこ
とである。「一製品あたり労働量」は初期値が違えば、その傾向がだいたい続
く。そこで元の初期値に掛けるオプションを用意し、それが 1.0 の場合と
1.5 の場合(--init-lpp-mag=1.0 と --init-lpp-mag=1.5 の場合)を試してみ
た。

<source>
$ python exp_02_05.py --init-lpp-mag=1.0 --trials=100 --score-transform=hybrid --save-history=me7_lpp_1.0.csv
Acronyms: W: Wages, N: Necessaries, L: Luxuries, I: Ingredients.

[1] OptForStep(Fail): iterated 592 times score=-2.3602310190466813
Companies N:2, L:2, I:2
[Type] [OwnerId] [ProfitRate]
N 1 0.1477959741135095
N 0 0.10127049815818046
L 4 0.04760970763271057
L 1 0.13365178847854356
I 0 0.14774391880917012
I 0 0.13452889546385483

Increase of Social Debt: -8606.572683368997
Increase of Total Savings: 2313.653177473392
Price W:24.636781466068975, N:7.455001813155708, L:15.313889893249057, I:13.149837049780977, S:0.05847574195560694
Worker's Savings Increase: 7.450021908069296
Supply of Labors = 655.0
(Demand - Supply) of Labors = -0.40346076692799215
Profit Rate N:0.1477959741135095, L:0.13365178847854356, I:0.14774391880917012
Product N:2316.9267813334213, L:169.99999999999997, I:1281.5044045164595
Savings mean:12.078456626045737, variance:46.58181581041189

[2] OptForStep: iterated 373 times score=-2.3605014912805253
Companies N:2, L:2, I:2
[Type] [OwnerId] [ProfitRate]
N 1 0.13896589335297677
N 0 0.09308280122388377
L 4 0.0606160319228116
L 1 0.13891560839982017
I 0 0.13887626174246065
I 0 0.12587481736832332

Increase of Social Debt: -9396.220611490608
Increase of Total Savings: 2132.9027714063395
Price W:25.14404663750557, N:7.493132509140533, L:15.602545894781333, I:13.25859859918647, S:0.12605923218397344
Worker's Savings Increase: 7.92239425366731
Supply of Labors = 662.0
(Demand - Supply) of Labors = 0.007557951223134296
Profit Rate N:0.13896589335297677, L:0.13891560839982017, I:0.13887626174246065
Product N:2309.8164385381547, L:202.0, I:1277.9560054025442
Savings mean:14.200747940877921, variance:44.204376371845065

(…)

[100] OptForStep: iterated 539 times score=-1.9948750748851554
Companies N:5, L:5, I:5
[Type] [OwnerId] [ProfitRate]
N 1 0.6450079759757852
N 1 0.6950074212660636
N 1 0.7466563162701466
N 1 0.798617401909987
N 1 0.8524844020835912
L 1 -0.38592288635138905
L 4 0.5262602593889526
L 3 0.39659138522864473
L 4 0.6326943952376045
L 3 0.7762017156724297
I 1 0.6200835805388397
I 0 0.6870328493327034
I 3 0.7392927727357566
I 1 0.7999650260479115
I 1 0.8754906375126839

Increase of Social Debt: 2243.3139758936295
Increase of Total Savings: 185.94838493137308
Price W:8.543025423431933, N:1.1795425908625226, L:3.4894933886455344, I:1.6410432268270552, S:0.6402321728410452
Worker's Savings Increase: 1.2301128135278132
Supply of Labors = 288.0
(Demand - Supply) of Labors = -4.268709640050417
Profit Rate N:0.8524844020835912, L:0.7762017156724297, I:0.8754906375126839
Product N:6230.785755332029, L:49.99999999999999, I:2734.418656354137
Savings mean:1.264384730779118, variance:1.0095879746739385
</source>

ちなみに --score-transform=none がデフォルトであるが、これを hybrid に
したほうが、経済が安定する。特に --init-lpp-mag=1.5 の際はこれがないと
最初経済がクラッシュぎみになってしまう。なお、上の出力結果で 1.5 のとき
は完全に省略した。

企業数は各分野とも 5 ぐらいであるが、そこにずっと固定されるわけではな
いのが興味深い。最適化の妙だろう。

今回、--save-history というオプションを作り、データを CSV ファイルにも
出力できるようになっている。出力した CSV ファイルをグラフにするための
show_histories.py も用意した。使い方は、申し訳ないがソースを見て欲しい。
それで出力したグラフが次の二つである。

予想としては、「一製品あたり労働量」を多く(1.5に)すれば、必要な労働量
が増える＝労働供給が増える一方、企業の利益率は犠牲になるだろう。が、社
会的には「生活保護」の必要性が減るため、社会的負債は少なくて済むだろう
というものだった。

{{me7_pr_and_sl.png}}

一枚目のグラフは、「労働供給が増える一方、企業の利益率は犠牲になる」こ
とを証左している。青の線が 1.0 のときの、黄色の線が 1.5 のときの「各分
野の最大の利益率…の平均」である。ともに新規起業によって上昇していくが、
最初のうちは差がないが、序々に差がついている。

緑の線が 1.0 のときの、赤の線が 1.5 のときの「全労働供給」である。こち
らはだいたい一定の幅を保ち、ともに下がっていっている。

企業の利益率の最大化ではなく、社会的負債の最小化をしているため、「生活
保護」を減らすために「全労働供給」が増えていくのではないかとも思ったが、
そうなってはいない。

{{me7_social_debt.png}}

二枚目のグラフは、社会的負債のグラフである。こちらは違いがほとんどわか
らない。「生活保護の必要性が減るため、社会的負債は少なくて済む」とはなっ
ていないようだ。逆に、「ニートになってベーシックインカムでまかなうほう
が、社会が効率的になる」とも言えてない。

もしかすると、どこかがおかしいのかもしれないが…。


** 追加実験: micro_economy_4*.py との統合。 (2020年2月15日)

贅沢品の ingredientsPerProduct を増やす「経済成長」モデルであるところ
の micro_economy_4.py を micro_economy_7.py にだいたい統合した
micro_economy_7li.py も作った。ただ、これはあまりうまくいっていない。

ingredientsPerProduct を増やす IL (ingredientsLevelForLuxuries) が基本、
一本調子で増えていくのが意外である。下がりそうなときも下がらないのは、
下げると利益等が下がるということか。

また、--trials=100 にするとパラメータによっては簡単に、必需品価格が 1
に貼りついたり、どれかの分野の企業数が 1 になってしまったり、労働需給の
差がとても大きなものになって、クラッシュぎみになってしまった。

スコアの組み方については、かなり特殊なことをしているので、ソースを見て
いただきたい。


** 追加実験: Dual-Annealing 法を使ってみる。 (2020年2月22日)

他の最適化手法として Dual-Annealing 法を使ってみる。それは
--opt-try=da または --opt-try=da0 で以前から試せたが、バージョン 0.0.9
でより適正に試せるようにした。

micro_economy_7li.py で試行回数 20 回(--trials=20) で --opt-try=da を試
した結果、社会的負債(social debt)がマイナスに大きいところなのだろうか、
賃金や必需品価格が値が大きな「飛び地」に移行してしまったりし
た。--opt-try=da0 を試すと、たまたま、「飛び地」には行かなかったが、贅
沢品の利益率のみマイナスになるなど、利益率の「バランス」を取っているは
ずなのにおかしな値になった。

この解決だが、価格の変化率が 0 に近いとよくなるような最適化項目を組み
込むべきかとまず考えた。しかし、それも「バランス」を取るのに似て効きに
くいのではないかと考えなおした。

そこで、揺れ動いていた利益率の「バランス」を取るのをかなり強制的にやっ
てみようと考えた。それを無理矢理するのが、新設したオプションで
--score-variance-mag-2=10 とする方法である。x というスコアを tanh をか
ませて組み込むときに、a * tanh(b * x) として、b を「感度」、a を「重要
度」と呼ぶことにすると、「重要度」を 1.0 から 10 に上げるのが、このオ
プションである。

こうすることで、「飛び地」への移行や、利益率のバランスの崩れなどおかし
なことはほとんど起きないようになった。企業数が 5 になりにくく 1 になっ
たりするなど、「おかしなこと」がまったく起きないわけではないが。

つまり、バランスに極度に気を付けていれば、それだけで「インフレ」みたい
なものが起きにくくなるとここでは結論できるようだった。


** 追加実験: 「公共事業」の成長。 (2020年3月10日)

水道などの公共事業は、贅沢品というより必需品が増えることに相当しよう。
贅沢品だけでなく必需品も成長するようにしてはどうだろう。必需品に含まれ
る原料の成長は定数 c = 0.5 ぐらいについて、ingredientsLevelForLuxuries ** c 
にすれば良いと考えた。

これを試すオプションとしては micro_economy_7li.py に
--power-necessaries-ingredients=0.5 を足せばよいようにした。

試すと、100期で iL は 70 まで成長。どれかの価格が 1 に貼り付く「クラッ
シュ」もなかった。

極限すると、必需品は賃金に含まれ、賃金は原料に含まれる。原料に含まれる
原料には上限があるため、必需品に含まれる原料には上限があるのではない
か。…と心配したが、意外なことに、今回与えた数値ではその上限に達する様
子はなかった。

また、成長は必需品の量が増えるべきであって、必需品に含まれる原料が増え
るべきというのは違うのではないか？…とは思った。

今回、税として取っているわけではないが、実際はそうしていると考えるなら、
その一定率の原料が公共事業に使われているイメージか。が、そのイメージな
ら贅沢品に関してもそれは言えそう。労働を必要とせず公共事業ができるわけ
はないので、原料だけ増えるというのはあまりよくないように思う。

原料だけでなく、一製品あたり労働量も増やすほうが公共事業のイメージには
近いかもしれないが、このモデルは、機械化なども同時に起こり、それが人材
の高度利用と打ち消しあい、一製品あたり労働量が増えてない場合をとらえて
いるということになるのだろう。

今回のようなことをせず、はっきり税として取って公共事業は別にするほうが
良いかとも考えたが、それは今後の課題とした。今回と似た枠組にしたいなら
贅沢品からの消費税と所得税に近い必需品からの消費税を考えることになるだ
ろうか。


** 結論

大改良と統合を行った。過去のソースとつながりがまったくわからなくなるほ
どの変化ではないが、かなりいじっている。企業数を一定にするため
standardProfitRate の最適化も導入した。

その中で、「必要のない仕事を生産する」ことの効果が、社会的負債にはほと
んどないことがわかった。

一方、「一製品あたり原料量」も見る生産の分担の改訂も行ったが、その効果
については実験ができていない。それは今後の課題としたい。

「経済成長」モデルとの統合はあまりうまくいかなかった。これをなんとかす
るのも今後の課題だろう。

Dual-Annealing 法は、そのままだと「飛び地」にいくなどしてうまくいかな
かったが、利益率のバランスを極度に重視することでそれが防げた。


** 最後にひとこと

ぜひ、いじって、いっぱい実験してみてください。いじるときは
micro_economy_7.py (無印) を基にするのが吉でしょう。


（なお、上の実験結果およびグラフはバージョン 0.0.7 によるもの。）


(This file was written in Japanese/UTF8.)
